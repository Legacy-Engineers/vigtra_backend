# Generated by Django 5.2.4 on 2025-08-09 17:20

import datetime
import django.core.validators
import django.db.models.deletion
import django_lifecycle.mixins
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('location', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContributionPlan',
            fields=[
                ('json_ext', models.JSONField(blank=True, db_column='JsonExt', null=True)),
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(db_column='ContributionPlanID', primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_column='ContributionPlanUUID', default=uuid.uuid4, editable=False, help_text='Unique identifier for the contribution plan', unique=True)),
                ('code', models.CharField(db_column='ContributionPlanCode', help_text='Unique code for the contribution plan', max_length=20, unique=True)),
                ('name', models.CharField(db_column='ContributionPlanName', help_text='Name of the contribution plan', max_length=100)),
                ('description', models.TextField(blank=True, db_column='Description', help_text='Detailed description of the plan', null=True)),
                ('plan_type', models.CharField(choices=[('IND', 'Individual'), ('FAM', 'Family'), ('GRP', 'Group'), ('COM', 'Community')], db_column='PlanType', default='FAM', help_text='Type of contribution plan', max_length=3)),
                ('status', models.CharField(choices=[('DR', 'Draft'), ('AC', 'Active'), ('SU', 'Suspended'), ('EX', 'Expired'), ('CA', 'Cancelled')], db_column='Status', default='DR', help_text='Current status of the plan', max_length=2)),
                ('calculation_type', models.CharField(choices=[('FIXED', 'Fixed Amount'), ('PERC_INC', 'Percentage of Income'), ('PERC_PREM', 'Percentage of Premium'), ('TIERED', 'Tiered by Income'), ('CUSTOM', 'Custom Formula')], db_column='CalculationType', default='FIXED', help_text='How contributions are calculated', max_length=10)),
                ('base_amount', models.DecimalField(db_column='BaseAmount', decimal_places=2, default=Decimal('0.00'), help_text='Base contribution amount', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('percentage_rate', models.DecimalField(blank=True, db_column='PercentageRate', decimal_places=2, help_text='Percentage rate for percentage-based calculations', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('min_contribution', models.DecimalField(blank=True, db_column='MinContribution', decimal_places=2, help_text='Minimum contribution amount', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('max_contribution', models.DecimalField(blank=True, db_column='MaxContribution', decimal_places=2, help_text='Maximum contribution amount', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('contribution_frequency', models.CharField(choices=[('M', 'Monthly'), ('Q', 'Quarterly'), ('SA', 'Semi-Annual'), ('A', 'Annual'), ('OT', 'One Time')], db_column='ContributionFrequency', default='M', help_text='How often contributions are due', max_length=2)),
                ('grace_period_days', models.PositiveIntegerField(db_column='GracePeriodDays', default=30, help_text='Grace period in days for late payments')),
                ('min_age', models.PositiveIntegerField(blank=True, db_column='MinAge', help_text='Minimum age for eligibility', null=True)),
                ('max_age', models.PositiveIntegerField(blank=True, db_column='MaxAge', help_text='Maximum age for eligibility', null=True)),
                ('min_income_threshold', models.DecimalField(blank=True, db_column='MinIncomeThreshold', decimal_places=2, help_text='Minimum income threshold for eligibility', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('max_income_threshold', models.DecimalField(blank=True, db_column='MaxIncomeThreshold', decimal_places=2, help_text='Maximum income threshold for eligibility', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('effective_date', models.DateField(db_column='EffectiveDate', default=datetime.date.today, help_text='Date when the plan becomes effective')),
                ('expiry_date', models.DateField(blank=True, db_column='ExpiryDate', help_text='Date when the plan expires', null=True)),
                ('currency', models.CharField(db_column='Currency', default='USD', help_text='Currency for contributions (ISO 4217 code)', max_length=3)),
                ('is_mandatory', models.BooleanField(db_column='IsMandatory', default=False, help_text='Whether participation in this plan is mandatory')),
                ('allows_partial_payment', models.BooleanField(db_column='AllowsPartialPayment', default=False, help_text='Whether partial payments are allowed')),
                ('auto_renew', models.BooleanField(db_column='AutoRenew', default=True, help_text='Whether contributions auto-renew')),
                ('custom_formula', models.TextField(blank=True, db_column='CustomFormula', help_text='Custom formula for contribution calculation (Python expression)', null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='Date plan was created')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date plan was last modified')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about the plan', null=True)),
                ('audit_user', models.ForeignKey(blank=True, db_column='AuditUser', help_text='User who last modified the plan', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('locations', models.ManyToManyField(blank=True, help_text='Locations where this plan is available (empty = all locations)', related_name='contribution_plans', to='location.location')),
            ],
            options={
                'verbose_name': 'Contribution Plan',
                'verbose_name_plural': 'Contribution Plans',
                'db_table': 'tblContributionPlans',
                'ordering': ['code', 'name'],
                'managed': True,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ContributionPlanBundle',
            fields=[
                ('json_ext', models.JSONField(blank=True, db_column='JsonExt', null=True)),
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(db_column='ContributionPlanBundleID', primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_column='ContributionPlanBundleUUID', default=uuid.uuid4, editable=False, help_text='Unique identifier for the bundle', unique=True)),
                ('code', models.CharField(db_column='BundleCode', help_text='Unique code for the bundle', max_length=20, unique=True)),
                ('name', models.CharField(db_column='BundleName', help_text='Name of the bundle', max_length=100)),
                ('description', models.TextField(blank=True, db_column='Description', help_text='Detailed description of the bundle', null=True)),
                ('bundle_type', models.CharField(choices=[('STD', 'Standard Bundle'), ('PRM', 'Premium Bundle'), ('BSC', 'Basic Bundle'), ('CMP', 'Comprehensive Bundle'), ('CST', 'Custom Bundle')], db_column='BundleType', default='STD', help_text='Type of bundle', max_length=3)),
                ('status', models.CharField(choices=[('DR', 'Draft'), ('AC', 'Active'), ('SU', 'Suspended'), ('EX', 'Expired'), ('CA', 'Cancelled')], db_column='Status', default='DR', help_text='Current status of the bundle', max_length=2)),
                ('pricing_strategy', models.CharField(choices=[('SUM', 'Sum of Individual Plans'), ('DISC', 'Discounted Sum'), ('FIXED', 'Fixed Bundle Price'), ('WAVG', 'Weighted Average'), ('TIER', 'Tiered Pricing')], db_column='PricingStrategy', default='SUM', help_text='How bundle price is calculated', max_length=5)),
                ('fixed_bundle_price', models.DecimalField(blank=True, db_column='FixedBundlePrice', decimal_places=2, help_text='Fixed price for the entire bundle', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_percentage', models.DecimalField(db_column='DiscountPercentage', decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage applied to sum of plans', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('discount_amount', models.DecimalField(db_column='DiscountAmount', decimal_places=2, default=Decimal('0.00'), help_text='Fixed discount amount applied to bundle', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('min_bundle_price', models.DecimalField(blank=True, db_column='MinBundlePrice', decimal_places=2, help_text='Minimum price for the bundle', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('max_bundle_price', models.DecimalField(blank=True, db_column='MaxBundlePrice', decimal_places=2, help_text='Maximum price for the bundle', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_mandatory_complete', models.BooleanField(db_column='IsMandatoryComplete', default=False, help_text='Whether all plans in bundle must be selected')),
                ('min_plans_required', models.PositiveIntegerField(db_column='MinPlansRequired', default=1, help_text='Minimum number of plans that must be selected from bundle')),
                ('max_plans_allowed', models.PositiveIntegerField(blank=True, db_column='MaxPlansAllowed', help_text='Maximum number of plans that can be selected from bundle', null=True)),
                ('min_family_size', models.PositiveIntegerField(blank=True, db_column='MinFamilySize', help_text='Minimum family size for bundle eligibility', null=True)),
                ('max_family_size', models.PositiveIntegerField(blank=True, db_column='MaxFamilySize', help_text='Maximum family size for bundle eligibility', null=True)),
                ('requires_all_adults', models.BooleanField(db_column='RequiresAllAdults', default=False, help_text='Whether bundle requires all family members to be adults')),
                ('effective_date', models.DateField(db_column='EffectiveDate', default=datetime.date.today, help_text='Date when the bundle becomes effective')),
                ('expiry_date', models.DateField(blank=True, db_column='ExpiryDate', help_text='Date when the bundle expires', null=True)),
                ('display_order', models.PositiveIntegerField(db_column='DisplayOrder', default=0, help_text='Order for displaying bundles')),
                ('is_featured', models.BooleanField(db_column='IsFeatured', default=False, help_text='Whether this bundle is featured/promoted')),
                ('marketing_description', models.TextField(blank=True, db_column='MarketingDescription', help_text='Marketing description for public display', null=True)),
                ('terms_and_conditions', models.TextField(blank=True, db_column='TermsAndConditions', help_text='Terms and conditions for this bundle', null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='Date bundle was created')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date bundle was last modified')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about the bundle', null=True)),
                ('audit_user', models.ForeignKey(blank=True, db_column='AuditUser', help_text='User who last modified the bundle', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('locations', models.ManyToManyField(blank=True, help_text='Locations where this bundle is available', related_name='contribution_plan_bundles', to='location.location')),
            ],
            options={
                'verbose_name': 'Contribution Plan Bundle',
                'verbose_name_plural': 'Contribution Plan Bundles',
                'db_table': 'tblContributionPlanBundles',
                'ordering': ['display_order', 'code', 'name'],
                'managed': True,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ContributionPlanBundleItem',
            fields=[
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_mandatory', models.BooleanField(default=False, help_text='Whether this plan is mandatory in the bundle')),
                ('weight', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Weight for weighted average calculations', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('custom_price', models.DecimalField(blank=True, decimal_places=2, help_text='Custom price for this plan within the bundle', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying this item in the bundle')),
                ('description_override', models.TextField(blank=True, help_text='Custom description for this plan within the bundle', null=True)),
                ('bundle', models.ForeignKey(help_text='Bundle this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='bundle_items', to='contribution_plan.contributionplanbundle')),
                ('contribution_plan', models.ForeignKey(help_text='Contribution plan included in bundle', on_delete=django.db.models.deletion.CASCADE, related_name='bundle_memberships', to='contribution_plan.contributionplan')),
            ],
            options={
                'verbose_name': 'Bundle Item',
                'verbose_name_plural': 'Bundle Items',
                'db_table': 'tblContributionPlanBundleItems',
                'ordering': ['bundle', 'display_order', 'contribution_plan__code'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContributionPlanBundleTier',
            fields=[
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tier_name', models.CharField(help_text='Name of this pricing tier', max_length=50)),
                ('min_plans', models.PositiveIntegerField(help_text='Minimum number of plans for this tier')),
                ('max_plans', models.PositiveIntegerField(blank=True, help_text='Maximum number of plans for this tier', null=True)),
                ('tier_price', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed price for this tier', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage for this tier', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('is_percentage_discount', models.BooleanField(default=True, help_text='Whether to use percentage discount or fixed tier price')),
                ('bundle', models.ForeignKey(help_text='Bundle this tier belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='bundle_tiers', to='contribution_plan.contributionplanbundle')),
            ],
            options={
                'verbose_name': 'Bundle Tier',
                'verbose_name_plural': 'Bundle Tiers',
                'db_table': 'tblContributionPlanBundleTiers',
                'ordering': ['bundle', 'min_plans'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContributionTieredRate',
            fields=[
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tier_name', models.CharField(help_text="Name of this tier (e.g., 'Low Income', 'Middle Income')", max_length=50)),
                ('min_income', models.DecimalField(decimal_places=2, help_text='Minimum income for this tier', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('max_income', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum income for this tier (null = no upper limit)', max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('contribution_amount', models.DecimalField(decimal_places=2, help_text='Contribution amount for this tier', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('percentage_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage rate for this tier (if using percentage calculation)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('contribution_plan', models.ForeignKey(help_text='Contribution plan this tier belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='tiered_rates', to='contribution_plan.contributionplan')),
            ],
            options={
                'verbose_name': 'Contribution Tiered Rate',
                'verbose_name_plural': 'Contribution Tiered Rates',
                'db_table': 'tblContributionTieredRates',
                'ordering': ['contribution_plan', 'min_income'],
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['code'], name='idx_contrib_plan_code'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['status'], name='idx_contrib_plan_status'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['plan_type'], name='idx_contrib_plan_type'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['effective_date'], name='idx_contrib_plan_effective'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['expiry_date'], name='idx_contrib_plan_expiry'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['calculation_type'], name='idx_contrib_plan_calc_type'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['contribution_frequency'], name='idx_contrib_plan_frequency'),
        ),
        migrations.AddIndex(
            model_name='contributionplan',
            index=models.Index(fields=['validity_from', 'validity_to'], name='idx_contrib_plan_validity'),
        ),
        migrations.AddConstraint(
            model_name='contributionplan',
            constraint=models.UniqueConstraint(fields=('code',), name='unique_contribution_plan_code'),
        ),
        migrations.AddConstraint(
            model_name='contributionplan',
            constraint=models.CheckConstraint(condition=models.Q(('effective_date__lte', models.F('expiry_date')), ('expiry_date__isnull', True), _connector='OR'), name='chk_contrib_plan_dates'),
        ),
        migrations.AddConstraint(
            model_name='contributionplan',
            constraint=models.CheckConstraint(condition=models.Q(('min_age__lt', models.F('max_age')), ('max_age__isnull', True), ('min_age__isnull', True), _connector='OR'), name='chk_contrib_plan_ages'),
        ),
        migrations.AddConstraint(
            model_name='contributionplan',
            constraint=models.CheckConstraint(condition=models.Q(('min_contribution__lt', models.F('max_contribution')), ('max_contribution__isnull', True), ('min_contribution__isnull', True), _connector='OR'), name='chk_contrib_plan_amounts'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['code'], name='idx_bundle_code'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['status'], name='idx_bundle_status'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['bundle_type'], name='idx_bundle_type'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['effective_date'], name='idx_bundle_effective'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['expiry_date'], name='idx_bundle_expiry'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['pricing_strategy'], name='idx_bundle_pricing'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['display_order'], name='idx_bundle_display_order'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['is_featured'], name='idx_bundle_featured'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundle',
            index=models.Index(fields=['validity_from', 'validity_to'], name='idx_bundle_validity'),
        ),
        migrations.AddConstraint(
            model_name='contributionplanbundle',
            constraint=models.UniqueConstraint(fields=('code',), name='unique_bundle_code'),
        ),
        migrations.AddConstraint(
            model_name='contributionplanbundle',
            constraint=models.CheckConstraint(condition=models.Q(('effective_date__lte', models.F('expiry_date')), ('expiry_date__isnull', True), _connector='OR'), name='chk_bundle_dates'),
        ),
        migrations.AddConstraint(
            model_name='contributionplanbundle',
            constraint=models.CheckConstraint(condition=models.Q(('min_family_size__lt', models.F('max_family_size')), ('max_family_size__isnull', True), ('min_family_size__isnull', True), _connector='OR'), name='chk_bundle_family_sizes'),
        ),
        migrations.AddConstraint(
            model_name='contributionplanbundle',
            constraint=models.CheckConstraint(condition=models.Q(('min_bundle_price__lt', models.F('max_bundle_price')), ('max_bundle_price__isnull', True), ('min_bundle_price__isnull', True), _connector='OR'), name='chk_bundle_prices'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundleitem',
            index=models.Index(fields=['bundle'], name='idx_bundle_item_bundle'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundleitem',
            index=models.Index(fields=['contribution_plan'], name='idx_bundle_item_plan'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundleitem',
            index=models.Index(fields=['is_mandatory'], name='idx_bundle_item_mandatory'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundleitem',
            index=models.Index(fields=['display_order'], name='idx_bundle_item_order'),
        ),
        migrations.AddConstraint(
            model_name='contributionplanbundleitem',
            constraint=models.UniqueConstraint(fields=('bundle', 'contribution_plan'), name='unique_bundle_plan'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundletier',
            index=models.Index(fields=['bundle'], name='idx_tier_bundle'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundletier',
            index=models.Index(fields=['min_plans'], name='idx_tier_min_plans'),
        ),
        migrations.AddIndex(
            model_name='contributionplanbundletier',
            index=models.Index(fields=['max_plans'], name='idx_tier_max_plans'),
        ),
        migrations.AddConstraint(
            model_name='contributionplanbundletier',
            constraint=models.UniqueConstraint(fields=('bundle', 'min_plans'), name='unique_bundle_tier_min_plans'),
        ),
        migrations.AddIndex(
            model_name='contributiontieredrate',
            index=models.Index(fields=['contribution_plan'], name='idx_tier_plan'),
        ),
        migrations.AddIndex(
            model_name='contributiontieredrate',
            index=models.Index(fields=['min_income'], name='idx_tier_min_income'),
        ),
        migrations.AddIndex(
            model_name='contributiontieredrate',
            index=models.Index(fields=['max_income'], name='idx_tier_max_income'),
        ),
        migrations.AddConstraint(
            model_name='contributiontieredrate',
            constraint=models.UniqueConstraint(fields=('contribution_plan', 'min_income'), name='unique_tier_plan_min_income'),
        ),
    ]
