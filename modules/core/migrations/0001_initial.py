# Generated by Django 5.2.4 on 2025-08-09 17:20

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('module', models.CharField(db_index=True, help_text='Module or app where the action occurred', max_length=50)),
                ('model', models.CharField(db_index=True, help_text='Model or entity affected', max_length=50)),
                ('action', models.CharField(choices=[('CREATE', 'Created'), ('UPDATE', 'Updated'), ('DELETE', 'Deleted'), ('RESTORE', 'Restored'), ('ARCHIVE', 'Archived'), ('UNARCHIVE', 'Unarchived'), ('ACTIVATE', 'Activated'), ('DEACTIVATE', 'Deactivated'), ('IMPORT', 'Imported'), ('EXPORT', 'Exported'), ('SYNC', 'Synced'), ('MERGE', 'Merged'), ('SPLIT', 'Split'), ('MIGRATE', 'Migrated'), ('APPROVE', 'Approved'), ('REJECT', 'Rejected'), ('CANCEL', 'Cancelled'), ('COMPLETE', 'Completed'), ('FAIL', 'Failed'), ('START', 'Started'), ('PAUSE', 'Paused'), ('RESUME', 'Resumed'), ('STOP', 'Stopped'), ('RESTART', 'Restarted'), ('SCHEDULE', 'Scheduled'), ('UNSCHEDULE', 'Unscheduled'), ('RESCHEDULE', 'Rescheduled'), ('LOCK', 'Locked'), ('UNLOCK', 'Unlocked'), ('VERIFY', 'Verified'), ('UNVERIFY', 'Unverified'), ('PUBLISH', 'Published'), ('UNPUBLISH', 'Unpublished'), ('DRAFT', 'Drafted'), ('SUBMIT', 'Submitted'), ('LOGIN', 'Logged In'), ('LOGOUT', 'Logged Out'), ('PWD_RESET', 'Password Reset'), ('CUSTOM', 'Custom Action')], db_index=True, help_text='Type of action performed', max_length=20)),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the affected object', null=True)),
                ('data', models.JSONField(blank=True, help_text='Serialized data related to the action', null=True)),
                ('object_repr', models.CharField(help_text='String representation of the affected object', max_length=500)),
                ('message', models.TextField(help_text='Human-readable description of the action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the action occurred')),
                ('correlation_id', models.UUIDField(blank=True, db_index=True, help_text='ID to correlate related actions', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string from the request', null=True)),
                ('request_header', models.JSONField(blank=True, help_text='Sanitized request headers', null=True)),
                ('session_key', models.CharField(blank=True, help_text='Session key for web requests', max_length=40, null=True)),
                ('success', models.BooleanField(db_index=True, default=True, help_text='Whether the action was successful')),
                ('request_result_type', models.CharField(blank=True, choices=[('SUCCESS', 'Successful'), ('CLIENT_ERR', 'Client Error'), ('SERVER_ERR', 'Server Error'), ('UNAUTH', 'Unauthorized'), ('FORBIDDEN', 'Forbidden'), ('NOT_FOUND', 'Not Found'), ('CONFLICT', 'Conflict'), ('VALID_ERR', 'Validation Error'), ('TIMEOUT', 'Timeout'), ('RATE_LIMIT', 'Rate Limited')], help_text='Classification of the result', max_length=15, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if the action failed', null=True)),
                ('error_code', models.CharField(blank=True, help_text='Error code if the action failed', max_length=50, null=True)),
                ('api_type', models.CharField(choices=[('GQL', 'GraphQL'), ('REST', 'REST API'), ('WEB', 'Web Interface'), ('CLI', 'Command Line'), ('WEBHOOK', 'Webhook'), ('BG', 'Background Task')], default='WEB', help_text='Type of API interface used', max_length=10)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('tags', models.JSONField(default=list, help_text='Tags for categorization and filtering')),
                ('extra_data', models.JSONField(blank=True, help_text='Additional context-specific data', null=True)),
                ('content_type', models.ForeignKey(blank=True, help_text='Content type of the affected object', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Change Log',
                'verbose_name_plural': 'Change Logs',
                'db_table': 'tblChangeLogs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['module', 'model'], name='idx_changelog_module_model'), models.Index(fields=['action', 'timestamp'], name='idx_changelog_action_time'), models.Index(fields=['user', 'timestamp'], name='idx_changelog_user_time'), models.Index(fields=['success', 'timestamp'], name='idx_changelog_success_time'), models.Index(fields=['correlation_id'], name='idx_changelog_correlation'), models.Index(fields=['content_type', 'object_id'], name='idx_changelog_content')],
                'constraints': [models.CheckConstraint(condition=models.Q(('execution_time__gte', 0)), name='chk_changelog_positive_execution_time')],
            },
        ),
    ]
