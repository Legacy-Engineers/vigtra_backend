# Generated by Django 5.2.4 on 2025-07-11 23:22

import datetime
import django.core.validators
import django.db.models.deletion
import django_lifecycle.mixins
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('location', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(db_column='EducationId', primary_key=True, serialize=False)),
                ('education', models.CharField(db_column='Education', help_text='Education level', max_length=100)),
                ('code', models.CharField(blank=True, help_text='Education code', max_length=10, null=True, unique=True)),
                ('level', models.PositiveSmallIntegerField(default=0, help_text='Education level rank')),
                ('is_active', models.BooleanField(default=True, help_text='Whether education level is active')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Education Levels',
                'db_table': 'tblEducations',
                'ordering': ['level', 'education'],
                'managed': True,
                'indexes': [models.Index(fields=['education'], name='idx_education_name'), models.Index(fields=['level'], name='idx_education_level'), models.Index(fields=['is_active'], name='idx_education_active')],
            },
        ),
        migrations.CreateModel(
            name='FamilyType',
            fields=[
                ('code', models.CharField(db_column='FamilyTypeCode', help_text='Family type code', max_length=2, primary_key=True, serialize=False)),
                ('type', models.CharField(db_column='FamilyType', help_text='Family type description', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this family type is active')),
                ('sort_order', models.PositiveSmallIntegerField(default=0, help_text='Sort order for display')),
            ],
            options={
                'verbose_name': 'Family Type',
                'verbose_name_plural': 'Family Types',
                'db_table': 'tblFamilyTypes',
                'ordering': ['sort_order', 'code'],
                'managed': True,
                'indexes': [models.Index(fields=['code'], name='idx_family_type_code'), models.Index(fields=['is_active'], name='idx_family_type_active')],
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('code', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], db_column='Code', help_text='Gender code', max_length=1, primary_key=True, serialize=False)),
                ('gender', models.CharField(blank=True, db_column='Gender', help_text='Gender description', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
                'db_table': 'tblGenders',
                'managed': True,
                'indexes': [models.Index(fields=['code'], name='idx_gender_code')],
            },
        ),
        migrations.CreateModel(
            name='IdentificationType',
            fields=[
                ('code', models.CharField(db_column='IdentificationCode', help_text='Identification type code', max_length=10, primary_key=True, serialize=False)),
                ('identification_type', models.CharField(db_column='IdentificationTypes', help_text='Identification type description', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether identification type is active')),
                ('requires_validation', models.BooleanField(default=False, help_text='Whether this ID type requires validation')),
                ('validation_regex', models.CharField(blank=True, help_text='Regex pattern for validation', max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'Identification Type',
                'verbose_name_plural': 'Identification Types',
                'db_table': 'tblIdentificationTypes',
                'ordering': ['identification_type'],
                'managed': True,
                'indexes': [models.Index(fields=['code'], name='idx_id_type_code'), models.Index(fields=['is_active'], name='idx_id_type_active')],
            },
        ),
        migrations.CreateModel(
            name='Insuree',
            fields=[
                ('json_ext', models.JSONField(blank=True, db_column='JsonExt', null=True)),
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(db_column='InsureeID', primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_column='InsureeUUID', default=uuid.uuid4, editable=False, help_text='Unique identifier for the insuree', unique=True)),
                ('chf_id', models.CharField(blank=True, db_column='CHFID', help_text='CHF identification number', max_length=50, null=True, unique=True)),
                ('last_name', models.CharField(db_column='LastName', help_text='Last name', max_length=100)),
                ('other_names', models.CharField(db_column='OtherNames', help_text='Other names', max_length=100)),
                ('dob', models.DateField(blank=True, db_column='DOB', help_text='Date of birth', null=True)),
                ('marital', models.CharField(blank=True, choices=[('S', 'Single'), ('M', 'Married'), ('D', 'Divorced'), ('W', 'Widowed')], db_column='Marital', help_text='Marital status', max_length=1, null=True)),
                ('passport', models.CharField(blank=True, help_text='Passport number', max_length=25, null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', help_text='Phone number', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}')])),
                ('email', models.EmailField(blank=True, db_column='Email', help_text='Email address', max_length=100, null=True)),
                ('current_address', models.CharField(blank=True, db_column='CurrentAddress', help_text='Current address', max_length=200, null=True)),
                ('geolocation', models.CharField(blank=True, db_column='GeoLocation', help_text='GPS coordinates', max_length=250, null=True)),
                ('photo', models.ImageField(blank=True, db_column='Photo', help_text='Photo of the insuree', max_length=255, null=True, upload_to='insuree/photos/%Y/%m/')),
                ('photo_date', models.DateField(blank=True, db_column='PhotoDate', help_text='Date photo was taken', null=True)),
                ('card_issued', models.BooleanField(db_column='CardIssued', default=False, help_text='Whether card has been issued')),
                ('card_issued_date', models.DateField(blank=True, help_text='Date card was issued', null=True)),
                ('identification_number', models.CharField(blank=True, help_text='Identification number', max_length=50, null=True)),
                ('offline', models.BooleanField(db_column='isOffline', default=False, help_text='Whether created offline')),
                ('status', models.CharField(choices=[('AC', 'Active'), ('IN', 'Inactive'), ('DE', 'Deceased'), ('SU', 'Suspended'), ('PE', 'Pending')], default='AC', help_text='Current status', max_length=2)),
                ('status_date', models.DateField(blank=True, db_column='StatusDate', help_text='Date status was changed', null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='Date insuree was created')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date insuree was last modified')),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('audit_user', models.ForeignKey(blank=True, db_column='AuditUser', help_text='User who last modified the insuree', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('current_village', models.ForeignKey(blank=True, help_text='Current village', null=True, on_delete=django.db.models.deletion.SET_NULL, to='location.location')),
                ('education', models.ForeignKey(blank=True, help_text='Education level', null=True, on_delete=django.db.models.deletion.SET_NULL, to='insuree.education')),
                ('gender', models.ForeignKey(blank=True, db_column='Gender', help_text='Gender', null=True, on_delete=django.db.models.deletion.PROTECT, to='insuree.gender')),
                ('health_facility', models.ForeignKey(blank=True, help_text='Associated health facility', null=True, on_delete=django.db.models.deletion.SET_NULL, to='location.healthfacility')),
                ('identification', models.ForeignKey(blank=True, help_text='Identification type', null=True, on_delete=django.db.models.deletion.PROTECT, to='insuree.identificationtype')),
            ],
            options={
                'verbose_name': 'Insuree',
                'verbose_name_plural': 'Insurees',
                'db_table': 'tblInsurees',
                'managed': True,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('json_ext', models.JSONField(blank=True, db_column='JsonExt', null=True)),
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(db_column='FamilyID', primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_column='FamilyUUID', default=uuid.uuid4, editable=False, help_text='Unique identifier for the family', unique=True)),
                ('poverty', models.BooleanField(db_column='Poverty', default=False, help_text='Whether family is in poverty')),
                ('address', models.CharField(blank=True, db_column='FamilyAddress', help_text='Family address', max_length=200, null=True)),
                ('is_offline', models.BooleanField(db_column='isOffline', default=False, help_text='Whether family was created offline')),
                ('ethnicity', models.CharField(blank=True, db_column='Ethnicity', help_text='Family ethnicity', max_length=50, null=True)),
                ('confirmation_no', models.CharField(blank=True, db_column='ConfirmationNo', help_text='Confirmation number', max_length=12, null=True, unique=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='Date family was created')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date family was last modified')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the family', null=True)),
                ('audit_user', models.ForeignKey(blank=True, db_column='AuditUser', help_text='User who last modified the family', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_column='LocationId', help_text='Family location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='location.location')),
                ('family_type', models.ForeignKey(blank=True, db_column='FamilyType', help_text='Type of family', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='families', to='insuree.familytype')),
                ('head_insuree', models.ForeignKey(db_column='InsureeID', help_text='Head of the family (maintained for compatibility)', on_delete=django.db.models.deletion.PROTECT, related_name='head_of', to='insuree.insuree')),
            ],
            options={
                'verbose_name': 'Family',
                'verbose_name_plural': 'Families',
                'db_table': 'tblFamilies',
                'managed': True,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(db_column='ProfessionId', primary_key=True, serialize=False)),
                ('profession', models.CharField(db_column='Profession', help_text='Profession name', max_length=100)),
                ('code', models.CharField(blank=True, help_text='Profession code', max_length=10, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether profession is active')),
                ('sort_order', models.PositiveSmallIntegerField(default=0, help_text='Sort order for display')),
            ],
            options={
                'verbose_name': 'Profession',
                'verbose_name_plural': 'Professions',
                'db_table': 'tblProfessions',
                'ordering': ['sort_order', 'profession'],
                'managed': True,
                'indexes': [models.Index(fields=['profession'], name='idx_profession_name'), models.Index(fields=['is_active'], name='idx_profession_active')],
            },
        ),
        migrations.AddField(
            model_name='insuree',
            name='profession',
            field=models.ForeignKey(blank=True, help_text='Profession', null=True, on_delete=django.db.models.deletion.SET_NULL, to='insuree.profession'),
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(db_column='RelationId', primary_key=True, serialize=False)),
                ('relation', models.CharField(db_column='Relation', help_text='Relationship description', max_length=50)),
                ('code', models.CharField(blank=True, help_text='Relationship code', max_length=10, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether relationship is active')),
                ('sort_order', models.PositiveSmallIntegerField(default=0, help_text='Sort order for display')),
            ],
            options={
                'verbose_name': 'Relation',
                'verbose_name_plural': 'Relations',
                'db_table': 'tblRelations',
                'ordering': ['sort_order', 'relation'],
                'managed': True,
                'indexes': [models.Index(fields=['relation'], name='idx_relation_name'), models.Index(fields=['is_active'], name='idx_relation_active')],
            },
        ),
        migrations.CreateModel(
            name='FamilyMembership',
            fields=[
                ('validity_from', models.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', models.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the membership', unique=True)),
                ('is_head', models.BooleanField(default=False, help_text='Whether this member is head of family')),
                ('status', models.CharField(choices=[('AC', 'Active'), ('IN', 'Inactive'), ('TR', 'Transferred'), ('DE', 'Deceased')], default='AC', help_text='Membership status', max_length=2)),
                ('membership_start_date', models.DateField(default=datetime.date.today, help_text='Date membership started')),
                ('membership_end_date', models.DateField(blank=True, help_text='Date membership ended', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about this membership', null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='Date membership was created')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date membership was last modified')),
                ('audit_user', models.ForeignKey(blank=True, help_text='User who last modified the membership', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('family', models.ForeignKey(help_text='Family this membership belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='insuree.family')),
                ('insuree', models.ForeignKey(help_text='Insuree who is a member', on_delete=django.db.models.deletion.CASCADE, related_name='family_memberships', to='insuree.insuree')),
                ('relationship', models.ForeignKey(blank=True, help_text='Relationship to head of family', null=True, on_delete=django.db.models.deletion.SET_NULL, to='insuree.relation')),
            ],
            options={
                'verbose_name': 'Family Membership',
                'verbose_name_plural': 'Family Memberships',
                'db_table': 'tblFamilyMemberships',
                'ordering': ['family', '-is_head', 'insuree__last_name'],
                'managed': True,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['head_insuree'], name='idx_family_head'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['location'], name='idx_family_location'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['family_type'], name='idx_family_type'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['poverty'], name='idx_family_poverty'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['confirmation_no'], name='idx_family_confirmation'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['created_date'], name='idx_family_created'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['validity_from', 'validity_to'], name='idx_family_validity'),
        ),
        migrations.AddConstraint(
            model_name='family',
            constraint=models.CheckConstraint(condition=models.Q(('confirmation_no__isnull', True), ('confirmation_no__length__gte', 3), _connector='OR'), name='chk_family_confirmation_min_length'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['chf_id'], name='idx_insuree_chfid'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['last_name', 'other_names'], name='idx_insuree_names'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['dob'], name='idx_insuree_dob'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['status'], name='idx_insuree_status'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['gender'], name='idx_insuree_gender'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['created_date'], name='idx_insuree_created'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['validity_from', 'validity_to'], name='idx_insuree_validity'),
        ),
        migrations.AddIndex(
            model_name='insuree',
            index=models.Index(fields=['identification_number'], name='idx_insuree_id_number'),
        ),
        migrations.AddConstraint(
            model_name='insuree',
            constraint=models.UniqueConstraint(condition=models.Q(('chf_id__isnull', False)), fields=('chf_id',), name='unique_chf_id'),
        ),
        migrations.AddConstraint(
            model_name='insuree',
            constraint=models.UniqueConstraint(condition=models.Q(('head', True)), fields=('family', 'head'), name='unique_family_head'),
        ),
        migrations.AddConstraint(
            model_name='insuree',
            constraint=models.CheckConstraint(condition=models.Q(('dob__lte', datetime.date(2025, 7, 11))), name='chk_insuree_dob_not_future'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['family'], name='idx_membership_family'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['insuree'], name='idx_membership_insuree'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['status'], name='idx_membership_status'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['is_head'], name='idx_membership_head'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['membership_start_date'], name='idx_membership_start'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['membership_end_date'], name='idx_membership_end'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['family', 'status'], name='idx_membership_family_status'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['insuree', 'status'], name='idx_membership_insuree_status'),
        ),
        migrations.AddIndex(
            model_name='familymembership',
            index=models.Index(fields=['validity_from', 'validity_to'], name='idx_membership_validity'),
        ),
        migrations.AddConstraint(
            model_name='familymembership',
            constraint=models.UniqueConstraint(fields=('family', 'insuree', 'validity_from'), name='unique_family_member_validity'),
        ),
        migrations.AddConstraint(
            model_name='familymembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_head', True), ('status', 'AC')), fields=('family', 'is_head'), name='unique_family_head_active'),
        ),
        migrations.AddConstraint(
            model_name='familymembership',
            constraint=models.CheckConstraint(condition=models.Q(('membership_end_date__isnull', True), ('membership_end_date__gte', models.F('membership_start_date')), _connector='OR'), name='chk_membership_end_after_start'),
        ),
    ]
