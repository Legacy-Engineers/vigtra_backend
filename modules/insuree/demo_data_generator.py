from modules.core.base_demo_generator import BaseDemoDataGenerator
from faker import Faker
from modules.location.models import Location, LocationType
from modules.insuree.models.insuree_model_dependency import Gender
from modules.insuree.services.insuree import InsureeService
import logging
from django.db import transaction
from django.utils import timezone
from modules.authentication.models.user import User
from datetime import datetime

logger = logging.getLogger(__name__)

fake = Faker()

INSUREE_DATA = []

GENDER_DATA = [
    {
        "code": "M",
        "gender": "Male",
    },
    {
        "code": "F",
        "gender": "Female",
    },
]


class InsureeDemoDataGenerator(BaseDemoDataGenerator):
    def run_demo(self):
        self.generate_gender()
        self.generate_insuree()

    @transaction.atomic
    def generate_gender(self):
        for gender_data in GENDER_DATA:
            # Check if gender already exists to avoid UNIQUE constraint violation
            if not Gender.objects.filter(code=gender_data["code"]).exists():
                Gender.objects.create(
                    code=gender_data["code"],
                    gender=gender_data["gender"],
                )
                logger.info(f"Gender generated: {gender_data['gender']}")
            else:
                logger.info(
                    f"Gender {gender_data['gender']} already exists, skipping..."
                )

    @transaction.atomic
    def generate_insuree(self):
        self.load_insuree_demo_data()
        for insuree_data in INSUREE_DATA:
            service_response = InsureeService().create_insuree(
                insuree_data, user=self.get_random_user()
            )
            logger.info(f"Insuree generated: {service_response}")

    def get_random_user(self) -> User:
        return User.objects.order_by("?").first()

    def load_insuree_demo_data(self) -> dict:
        # Check if we have locations available
        if not Location.objects.exists():
            logger.error(
                "No locations found in database. Please run location demo data generation first."
            )
            return []

        for item in range(20):
            random_location = self.get_random_location()
            if not random_location:
                logger.error(
                    "Failed to get random location. Skipping insuree generation."
                )
                return []

            insuree_data = {
                "auto_generate_chf_id": True,
                "other_names": fake.first_name(),
                "last_name": fake.last_name(),
                "dob": timezone.make_aware(
                    datetime.combine(fake.date_of_birth(), datetime.min.time())
                ),
                "gender_code": fake.random_element(elements=("M", "F")),
                "location_id": random_location.id,
            }
            INSUREE_DATA.append(insuree_data)
        return INSUREE_DATA

    def get_random_location(self) -> Location:
        """Only 3 locations based on the location type generated by the location demo data."""
        location_type_names = ["State", "District", "City"]
        location_type = (
            LocationType.objects.filter(name__in=location_type_names)
            .order_by("?")
            .first()
        )

        if not location_type:
            logger.warning(
                "No location types found. Please run location demo data generation first."
            )
            return None

        location = Location.objects.filter(type=location_type).order_by("?").first()

        if not location:
            logger.warning(
                f"No locations found for type {location_type.name}. Please run location demo data generation first."
            )
            return None

        return location
